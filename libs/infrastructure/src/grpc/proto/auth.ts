// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/auth.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

/** Health Check 요청 */
export interface HealthCheckRequest {
  /** 추가 파라미터가 필요한 경우를 위한 service 필드 */
  service?: string | undefined;
}

/** Health Check 응답 */
export interface HealthCheckResponse {
  status: HealthCheckResponse_ServingStatus;
  message: string;
  /** 추가적인 상태 정보 (메모리 사용량, 연결 수 등) */
  details: { [key: string]: string };
}

export enum HealthCheckResponse_ServingStatus {
  UNKNOWN = 0,
  SERVING = 1,
  NOT_SERVING = 2,
  UNRECOGNIZED = -1,
}

export interface HealthCheckResponse_DetailsEntry {
  key: string;
  value: string;
}

/** 회원가입 요청 */
export interface GrpcRegisterRequest {
  nickname: string;
  email: string;
  password: string;
  roles: string[];
}

/** 로그인 요청 */
export interface GrpcLoginRequest {
  email: string;
  password: string;
}

/** 토큰 갱신 요청 */
export interface GrpcRefreshTokenRequest {
  userId: string;
  refreshToken: string;
}

/** 로그아웃 요청 */
export interface GrpcLogoutRequest {
  userId: string;
}

/** 프로필 조회 요청 */
export interface GrpcProfileRequest {
  userId: string;
}

/** 사용자 정보 업데이트 요청 */
export interface GrpcUpdateUserRequest {
  userId: string;
  nickname?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  roles: string[];
  status?: string | undefined;
  metadata: { [key: string]: string };
}

export interface GrpcUpdateUserRequest_MetadataEntry {
  key: string;
  value: string;
}

/** 인증 응답 (로그인/회원가입 공통) */
export interface GrpcAuthResponse {
  id: string;
  nickname: string;
  email: string;
  roles: string[];
  accessToken: string;
  refreshToken: string;
}

/** 토큰 응답 */
export interface GrpcTokenResponse {
  accessToken: string;
  refreshToken: string;
}

/** 로그아웃 응답 */
export interface GrpcLogoutResponse {
  success: boolean;
}

/** 프로필 응답 */
export interface GrpcProfileResponse {
  id: string;
  nickname: string;
  email: string;
  roles: string[];
  status: string;
  lastLoginAt: string;
  metadata: { [key: string]: string };
  createdAt: string;
  updatedAt: string;
}

export interface GrpcProfileResponse_MetadataEntry {
  key: string;
  value: string;
}

export const AUTH_PACKAGE_NAME = "auth";

/** 인증 서비스 정의 */

export interface AuthServiceClient {
  /** Health Check */

  healthCheck(request: HealthCheckRequest, metadata?: Metadata): Observable<HealthCheckResponse>;

  /** 회원가입 */

  register(request: GrpcRegisterRequest, metadata?: Metadata): Observable<GrpcAuthResponse>;

  /** 로그인 */

  login(request: GrpcLoginRequest, metadata?: Metadata): Observable<GrpcAuthResponse>;

  /** 토큰 갱신 */

  refreshToken(request: GrpcRefreshTokenRequest, metadata?: Metadata): Observable<GrpcTokenResponse>;

  /** 로그아웃 */

  logout(request: GrpcLogoutRequest, metadata?: Metadata): Observable<GrpcLogoutResponse>;

  /** 프로필 조회 */

  getProfile(request: GrpcProfileRequest, metadata?: Metadata): Observable<GrpcProfileResponse>;

  /** 사용자 정보 업데이트 */

  updateUser(request: GrpcUpdateUserRequest, metadata?: Metadata): Observable<GrpcAuthResponse>;
}

/** 인증 서비스 정의 */

export interface AuthServiceController {
  /** Health Check */

  healthCheck(
    request: HealthCheckRequest,
    metadata?: Metadata,
  ): Promise<HealthCheckResponse> | Observable<HealthCheckResponse> | HealthCheckResponse;

  /** 회원가입 */

  register(
    request: GrpcRegisterRequest,
    metadata?: Metadata,
  ): Promise<GrpcAuthResponse> | Observable<GrpcAuthResponse> | GrpcAuthResponse;

  /** 로그인 */

  login(
    request: GrpcLoginRequest,
    metadata?: Metadata,
  ): Promise<GrpcAuthResponse> | Observable<GrpcAuthResponse> | GrpcAuthResponse;

  /** 토큰 갱신 */

  refreshToken(
    request: GrpcRefreshTokenRequest,
    metadata?: Metadata,
  ): Promise<GrpcTokenResponse> | Observable<GrpcTokenResponse> | GrpcTokenResponse;

  /** 로그아웃 */

  logout(
    request: GrpcLogoutRequest,
    metadata?: Metadata,
  ): Promise<GrpcLogoutResponse> | Observable<GrpcLogoutResponse> | GrpcLogoutResponse;

  /** 프로필 조회 */

  getProfile(
    request: GrpcProfileRequest,
    metadata?: Metadata,
  ): Promise<GrpcProfileResponse> | Observable<GrpcProfileResponse> | GrpcProfileResponse;

  /** 사용자 정보 업데이트 */

  updateUser(
    request: GrpcUpdateUserRequest,
    metadata?: Metadata,
  ): Promise<GrpcAuthResponse> | Observable<GrpcAuthResponse> | GrpcAuthResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "healthCheck",
      "register",
      "login",
      "refreshToken",
      "logout",
      "getProfile",
      "updateUser",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
