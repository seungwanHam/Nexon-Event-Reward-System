// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/event.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "event";

/** 공통 메시지 */
export interface EmptyRequest {
}

export interface FindByIdRequest {
  id: string;
}

export interface DeleteResponse {
  success: boolean;
}

/** 이벤트 규칙 관련 메시지 */
export interface EventRule {
  id: string;
  name: string;
  description: string;
  isActive: boolean;
  startDate: string;
  endDate: string;
  conditionType: string;
  /** JSON 형식의 문자열 */
  conditionParams: string;
  rewardType: string;
  /** JSON 형식의 문자열 */
  rewardParams: string;
  requiresApproval: boolean;
  version: number;
  priority: number;
  createdBy: string;
  updatedBy: string;
  maxRewardsPerUser: number;
  totalRewardLimit: number;
  currentRewardCount: number;
  isDeleted: boolean;
  /** JSON 형식의 문자열 */
  metadata: string;
  createdAt: string;
  updatedAt: string;
}

export interface FindAllEventRulesRequest {
  showInactive: boolean;
}

export interface EventRulesResponse {
  success: boolean;
  data: EventRule[];
}

export interface EventRuleResponse {
  success: boolean;
  data: EventRule | undefined;
}

export interface CreateEventRuleRequest {
  name: string;
  description: string;
  isActive: boolean;
  startDate: string;
  endDate: string;
  conditionType: string;
  /** JSON 형식의 문자열 */
  conditionParams: string;
  rewardType: string;
  /** JSON 형식의 문자열 */
  rewardParams: string;
  requiresApproval: boolean;
  priority: number;
  maxRewardsPerUser: number;
  totalRewardLimit: number;
  /** JSON 형식의 문자열 */
  metadata: string;
  /** 요청 사용자 */
  userId: string;
}

export interface UpdateEventRuleRequest {
  id: string;
  name: string;
  description: string;
  isActive: boolean;
  startDate: string;
  endDate: string;
  conditionType: string;
  /** JSON 형식의 문자열 */
  conditionParams: string;
  rewardType: string;
  /** JSON 형식의 문자열 */
  rewardParams: string;
  requiresApproval: boolean;
  priority: number;
  maxRewardsPerUser: number;
  totalRewardLimit: number;
  /** JSON 형식의 문자열 */
  metadata: string;
  /** 요청 사용자 */
  userId: string;
}

export interface ToggleEventRuleStatusRequest {
  id: string;
  isActive: boolean;
  userId: string;
}

/** 사용자 이벤트 관련 메시지 */
export interface UserEvent {
  id: string;
  userId: string;
  eventType: string;
  eventKey: string;
  /** JSON 형식의 문자열 */
  metadata: string;
  occurredAt: string;
  processed: boolean;
  processedAt: string;
  relatedRedemptions: string[];
  idempotencyKey: string;
  createdAt: string;
  updatedAt: string;
}

export interface RecordUserEventRequest {
  userId: string;
  eventType: string;
  /** JSON 형식의 문자열 */
  metadata: string;
  idempotencyKey: string;
}

export interface FindUserEventsRequest {
  userId: string;
  eventType: string;
  limit: number;
}

export interface UserEventResponse {
  success: boolean;
  data: UserEvent | undefined;
}

export interface UserEventsResponse {
  success: boolean;
  data: UserEvent[];
}

/** 보상 관련 메시지 */
export interface Reward {
  id: string;
  userId: string;
  eventRuleId: string;
  rewardType: string;
  /** JSON 형식의 문자열 */
  rewardData: string;
  status: string;
  requestedAt: string;
  processedAt: string;
  approvedBy: string;
  rejectionReason: string;
  expiresAt: string;
  transactionId: string;
  /** JSON 형식의 문자열 */
  metadata: string;
  statusHistory: StatusHistory[];
  createdAt: string;
  updatedAt: string;
}

export interface StatusHistory {
  status: string;
  timestamp: string;
  performedBy: string;
  reason: string;
}

export interface RequestRewardRequest {
  userId: string;
  eventRuleId: string;
  transactionId: string;
}

export interface ProcessRewardRequest {
  id: string;
  operatorId: string;
  reason: string;
}

export interface FindRewardsRequest {
  limit: number;
  offset: number;
}

export interface FindUserRewardsRequest {
  userId: string;
  limit: number;
  offset: number;
}

export interface SearchRewardsRequest {
  userId: string;
  eventRuleId: string;
  status: string[];
  startDate: string;
  endDate: string;
  limit: number;
  offset: number;
}

export interface RewardResponse {
  success: boolean;
  data: Reward | undefined;
}

export interface RewardsResponse {
  success: boolean;
  data: Reward[];
  total: number;
}

export interface HealthCheckResponse {
  status: string;
  service: string;
  timestamp: string;
}

export const EVENT_PACKAGE_NAME = "event";

/** 이벤트 서비스 정의 */

export interface EventServiceClient {
  /** 이벤트 규칙 관련 RPC */

  findAllEventRules(request: FindAllEventRulesRequest, metadata?: Metadata): Observable<EventRulesResponse>;

  findActiveEventRules(request: EmptyRequest, metadata?: Metadata): Observable<EventRulesResponse>;

  findEventRuleById(request: FindByIdRequest, metadata?: Metadata): Observable<EventRuleResponse>;

  createEventRule(request: CreateEventRuleRequest, metadata?: Metadata): Observable<EventRuleResponse>;

  updateEventRule(request: UpdateEventRuleRequest, metadata?: Metadata): Observable<EventRuleResponse>;

  toggleEventRuleStatus(request: ToggleEventRuleStatusRequest, metadata?: Metadata): Observable<EventRuleResponse>;

  deleteEventRule(request: FindByIdRequest, metadata?: Metadata): Observable<DeleteResponse>;

  /** 사용자 이벤트 관련 RPC */

  recordUserEvent(request: RecordUserEventRequest, metadata?: Metadata): Observable<UserEventResponse>;

  findUserEvents(request: FindUserEventsRequest, metadata?: Metadata): Observable<UserEventsResponse>;

  /** 보상 관련 RPC */

  requestReward(request: RequestRewardRequest, metadata?: Metadata): Observable<RewardResponse>;

  approveReward(request: ProcessRewardRequest, metadata?: Metadata): Observable<RewardResponse>;

  rejectReward(request: ProcessRewardRequest, metadata?: Metadata): Observable<RewardResponse>;

  completeReward(request: ProcessRewardRequest, metadata?: Metadata): Observable<RewardResponse>;

  findPendingRewards(request: FindRewardsRequest, metadata?: Metadata): Observable<RewardsResponse>;

  searchRewards(request: SearchRewardsRequest, metadata?: Metadata): Observable<RewardsResponse>;

  findUserRewardHistory(request: FindUserRewardsRequest, metadata?: Metadata): Observable<RewardsResponse>;

  /** 헬스 체크 */

  healthCheck(request: EmptyRequest, metadata?: Metadata): Observable<HealthCheckResponse>;
}

/** 이벤트 서비스 정의 */

export interface EventServiceController {
  /** 이벤트 규칙 관련 RPC */

  findAllEventRules(
    request: FindAllEventRulesRequest,
    metadata?: Metadata,
  ): Promise<EventRulesResponse> | Observable<EventRulesResponse> | EventRulesResponse;

  findActiveEventRules(
    request: EmptyRequest,
    metadata?: Metadata,
  ): Promise<EventRulesResponse> | Observable<EventRulesResponse> | EventRulesResponse;

  findEventRuleById(
    request: FindByIdRequest,
    metadata?: Metadata,
  ): Promise<EventRuleResponse> | Observable<EventRuleResponse> | EventRuleResponse;

  createEventRule(
    request: CreateEventRuleRequest,
    metadata?: Metadata,
  ): Promise<EventRuleResponse> | Observable<EventRuleResponse> | EventRuleResponse;

  updateEventRule(
    request: UpdateEventRuleRequest,
    metadata?: Metadata,
  ): Promise<EventRuleResponse> | Observable<EventRuleResponse> | EventRuleResponse;

  toggleEventRuleStatus(
    request: ToggleEventRuleStatusRequest,
    metadata?: Metadata,
  ): Promise<EventRuleResponse> | Observable<EventRuleResponse> | EventRuleResponse;

  deleteEventRule(
    request: FindByIdRequest,
    metadata?: Metadata,
  ): Promise<DeleteResponse> | Observable<DeleteResponse> | DeleteResponse;

  /** 사용자 이벤트 관련 RPC */

  recordUserEvent(
    request: RecordUserEventRequest,
    metadata?: Metadata,
  ): Promise<UserEventResponse> | Observable<UserEventResponse> | UserEventResponse;

  findUserEvents(
    request: FindUserEventsRequest,
    metadata?: Metadata,
  ): Promise<UserEventsResponse> | Observable<UserEventsResponse> | UserEventsResponse;

  /** 보상 관련 RPC */

  requestReward(
    request: RequestRewardRequest,
    metadata?: Metadata,
  ): Promise<RewardResponse> | Observable<RewardResponse> | RewardResponse;

  approveReward(
    request: ProcessRewardRequest,
    metadata?: Metadata,
  ): Promise<RewardResponse> | Observable<RewardResponse> | RewardResponse;

  rejectReward(
    request: ProcessRewardRequest,
    metadata?: Metadata,
  ): Promise<RewardResponse> | Observable<RewardResponse> | RewardResponse;

  completeReward(
    request: ProcessRewardRequest,
    metadata?: Metadata,
  ): Promise<RewardResponse> | Observable<RewardResponse> | RewardResponse;

  findPendingRewards(
    request: FindRewardsRequest,
    metadata?: Metadata,
  ): Promise<RewardsResponse> | Observable<RewardsResponse> | RewardsResponse;

  searchRewards(
    request: SearchRewardsRequest,
    metadata?: Metadata,
  ): Promise<RewardsResponse> | Observable<RewardsResponse> | RewardsResponse;

  findUserRewardHistory(
    request: FindUserRewardsRequest,
    metadata?: Metadata,
  ): Promise<RewardsResponse> | Observable<RewardsResponse> | RewardsResponse;

  /** 헬스 체크 */

  healthCheck(
    request: EmptyRequest,
    metadata?: Metadata,
  ): Promise<HealthCheckResponse> | Observable<HealthCheckResponse> | HealthCheckResponse;
}

export function EventServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "findAllEventRules",
      "findActiveEventRules",
      "findEventRuleById",
      "createEventRule",
      "updateEventRule",
      "toggleEventRuleStatus",
      "deleteEventRule",
      "recordUserEvent",
      "findUserEvents",
      "requestReward",
      "approveReward",
      "rejectReward",
      "completeReward",
      "findPendingRewards",
      "searchRewards",
      "findUserRewardHistory",
      "healthCheck",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EVENT_SERVICE_NAME = "EventService";
