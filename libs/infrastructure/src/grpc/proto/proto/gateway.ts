// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/gateway.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "gateway";

/** 상태 확인 요청 */
export interface HealthCheckRequest {
  service: string;
}

/** 상태 확인 응답 */
export interface HealthCheckResponse {
  status: HealthCheckResponse_ServingStatus;
  message: string;
  metadata: { [key: string]: string };
}

export enum HealthCheckResponse_ServingStatus {
  UNKNOWN = 0,
  SERVING = 1,
  NOT_SERVING = 2,
  UNRECOGNIZED = -1,
}

export interface HealthCheckResponse_MetadataEntry {
  key: string;
  value: string;
}

/** 프록시 요청 */
export interface ProxyRequest {
  method: string;
  headers: { [key: string]: string };
  path: string;
  body: Uint8Array;
  query: { [key: string]: string };
  originService: string;
}

export interface ProxyRequest_HeadersEntry {
  key: string;
  value: string;
}

export interface ProxyRequest_QueryEntry {
  key: string;
  value: string;
}

/** 프록시 응답 */
export interface ProxyResponse {
  statusCode: number;
  headers: { [key: string]: string };
  body: Uint8Array;
}

export interface ProxyResponse_HeadersEntry {
  key: string;
  value: string;
}

export const GATEWAY_PACKAGE_NAME = "gateway";

/** 게이트웨이 서비스 정의 */

export interface GatewayServiceClient {
  /** 게이트웨이 상태 확인 */

  healthCheck(request: HealthCheckRequest, metadata?: Metadata): Observable<HealthCheckResponse>;

  /** 인증 전달 */

  forwardAuth(request: ProxyRequest, metadata?: Metadata): Observable<ProxyResponse>;

  /** 이벤트 전달 */

  forwardEvent(request: ProxyRequest, metadata?: Metadata): Observable<ProxyResponse>;
}

/** 게이트웨이 서비스 정의 */

export interface GatewayServiceController {
  /** 게이트웨이 상태 확인 */

  healthCheck(
    request: HealthCheckRequest,
    metadata?: Metadata,
  ): Promise<HealthCheckResponse> | Observable<HealthCheckResponse> | HealthCheckResponse;

  /** 인증 전달 */

  forwardAuth(
    request: ProxyRequest,
    metadata?: Metadata,
  ): Promise<ProxyResponse> | Observable<ProxyResponse> | ProxyResponse;

  /** 이벤트 전달 */

  forwardEvent(
    request: ProxyRequest,
    metadata?: Metadata,
  ): Promise<ProxyResponse> | Observable<ProxyResponse> | ProxyResponse;
}

export function GatewayServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["healthCheck", "forwardAuth", "forwardEvent"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("GatewayService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("GatewayService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const GATEWAY_SERVICE_NAME = "GatewayService";
